function UpdateST(t, e) { var a; "left" === e ? (leftRootNode = t, a = leftSt) : (rightRootNode = t, a = rightSt), a.loadJSON(t), a.compute(), a.onClick(a.root), a.geom.translate({ x: 0, y: -200 }, "end"), a.switchPosition("top", "replot", null) } function CreateNewST(t, e) { "left" === e ? leftRootNode = t : rightRootNode = t; var a = new $jit.ST({ constrained: !1, levelsToShow: 15, injectInto: "left" === e ? "left-infovis" : "right-infovis", levelDistance: 50, offsetY: 200, Navigation: { enable: !0, panning: !0 }, Node: { overridable: !0, type: "rectangle", height: 40, width: 60, color: "#ff7f00" }, Edge: { overridable: !0, type: "boxy", color: "#ff7f00", lineWidth: 10 }, Tips: { enable: !0, onShow: function (t, a) { var o; o = "left" === e ? leftRootNode : rightRootNode, t.innerHTML = a.id == o.id ? '<div class="rg-box-tooltip"><span style="font-weight:bold;color:orange">' + a.name + '</span><br /><span style="font-style:italic">' + getChampTitle(a.data.itemId) + "</span><br /><br />" + a.data.numPoints + " games.</div>" : '<div class="rg-box-tooltip"><span style="font-weight:bold;color:orange">' + a.name + "</span><br />Purchased in " + a.data.numPoints + " out of " + o.data.numPoints + " games (" + (100 * a.data.numPoints / o.data.numPoints).toFixed(1) + "% of total, " + (100 * a.data.parentPopularity).toFixed(1) + '% of parent)<br /><br /><span style="font-style:italic">Click for more information.</span></div>' } }, onCreateLabel: function (t, o) { var n = o.data.width > 0 ? 20 + 3 * o.data.width : 20; t.innerHTML = '<img src="' + o.data.img + '" style="width:' + n + "px;height:" + n + 'px;">', t.onclick = function () { var t; t = "left" === e ? leftRootNode : rightRootNode, a.graph.eachNode(function (t) { t.removeData("color"), t.removeData("height"), t.removeData("width"), t.eachAdjacency(function (t) { t.removeData("color"), t.removeData("topmost") }) }); for (var n = o, i = []; null != n;) { i.push(n), n.setData("color", "#22b14c", "end"); var d = n.getParents()[0]; null != d && (n.getAdjacency(d.id).setData("color", "#22b14c", "end"), n.getAdjacency(d.id).setData("topmost", !0)), n = d } if ("root" != o.id) { innerHtml = ""; for (var r = i.length - 2; r >= 0; r--) innerHtml += '<img src="' + i[r].data.img + '" style="width:30px;height:30px">'; innerHtml += "<table><tr><td>Popularity</td><td>" + (100 * o.data.numPoints / t.data.numPoints).toFixed(2) + "%</td><td>(" + o.data.numPoints + "/" + t.data.numPoints + ")</td></tr><tr><td>Last Node Popularity</td><td>" + (100 * o.data.numPoints / o.getParents()[0].data.numPoints).toFixed(2) + "%</td><td>(" + o.data.numPoints + "/" + o.getParents()[0].data.numPoints + ")</td></tr><tr><td>Win Percentage</td><td>" + (100 * o.data.numWins / o.data.numPoints).toFixed(2) + "%</td><td>(" + o.data.numWins + "/" + o.data.numPoints + ")</td></tr><tr><td>Average Build Time</td><td>" + Math.floor(o.data.avgBuildTime / 60) + ":" + EnsureLeadingZero((o.data.avgBuildTime % 60).toFixed(0)) + "</td></tr></table>", "left" === e ? $("#left-tree-details").html(innerHtml) : $("#right-tree-details").html(innerHtml) } a.compute("end"), a.geom.translate({ x: 0, y: -200 }, "end"), a.fx.animate({ modes: ["linear", "node-property:color", "edge-property:color"], duration: 1, onComplete: function () { } }) } }, onBeforePlotNode: function (t) { var e = t.data.width > 0 ? 20 + 3 * t.data.width : 20; t.setData("width", e + 6), t.setData("height", e + 6) }, onPlaceLabel: function (t, e) { var a = t.style; a.width = e.getData("width") + "px", a.height = e.getData("height") + "px", a.textAlign = "center", a.paddingTop = "3px" }, onBeforePlotLine: function (t) { t.data.$lineWidth = t.nodeTo.data.width / 2 } }); a.loadJSON(t), a.compute(), a.onClick(a.root), a.switchPosition("top", "replot", null), "left" === e ? leftSt = a : rightSt = a } var labelType, useGradients, nativeTextSupport, animate; !function () { var t = navigator.userAgent, e = t.match(/iPhone/i) || t.match(/iPad/i), a = typeof HTMLCanvasElement, o = "object" == a || "function" == a, n = o && "function" == typeof document.createElement("canvas").getContext("2d").fillText; labelType = !o || n && !e ? "Native" : "HTML", nativeTextSupport = "Native" == labelType, useGradients = o, animate = !(e || !o) }();