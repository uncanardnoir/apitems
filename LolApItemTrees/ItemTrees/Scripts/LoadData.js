function TryGetNodeIdValue(t, e) { for (var i = 0; i < t.length; i++) if (t[i].id === e) return t[i]; return null } function s2FormatChampOption(t) { return t.id ? $('<span style="font-weight:bold; font-size:150%;"><img src="Icons/c' + t.id + '.png" style="width:30px;height:30px;padding-right:3px;" />' + t.text + "</span>") : t.text } function s2FormatPatchOption(t) { return t.id ? $('<span style="font-weight:bold; font-size:100%;">' + t.text + "</span>") : t.text } function RecursiveBuildItemTree(t, e) { var i = { id: t.id + "-" + e.itemId, name: itemIdToName(e.itemId), data: { img: "Icons/" + e.itemId.toString() + ".png", numPoints: e.numberOfBuilds, width: Math.max(t.data.width + 10 * Math.log(e.numberOfBuilds / t.data.numPoints) / Math.LN10, 1), itemId: e.itemId, parentPopularity: e.numberOfBuilds / t.data.numPoints, numWins: e.numberOfWins, thirtySecondIntervals: e.thirtySecondIntervals, avgBuildTime: e.totalBuildTime / e.numberOfBuilds }, children: [] }; e.children.sort(function (t, e) { return t.numberOfBuilds < e.numberOfBuilds ? 1 : t.numberOfBuilds > e.numberOfBuilds ? -1 : 0 }); var r; for (r = e.children.length - 1; r >= 0; r -= 2) { var a = RecursiveBuildItemTree(i, e.children[r]); i.children.push(a) } for (var r = -2 == r ? 1 : 0; r < e.children.length; r += 2) { var a = RecursiveBuildItemTree(i, e.children[r]); i.children.push(a) } return i } function CreateCommonBuiltItemsTable(t, e, i, r) { for (var a = DictionaryToSortedArray(t), l = "Most Commonly Built Items<table><tr>", n = 0; 10 > n; n++) l += '<td class="align-center"><img src="Icons/' + a[n][0] + '.png" title="' + itemIdToName(parseInt(a[n][0])) + '" style="height:30px;width:30px;" /></td>'; l += "</tr><tr>"; for (var n = 0; 10 > n; n++) if (null == e) l += '<td class="align-center">' + (100 * a[n][1] / i).toFixed(1) + "%</td>"; else { if (a[n][0] in e) var s = a[n][1] / i - e[a[n][0]] / r; else var s = a[n][1] / i; var h = s >= .03 ? "#390" : -.03 >= s ? "#d90026" : "#ffffff"; l += '<td class="align-center" style="color:' + h + '">' + (100 * a[n][1] / i).toFixed(1) + "%</td>" } if (null != e) { l += "</tr><tr>"; for (var n = 0; 10 > n; n++) { if (a[n][0] in e) var s = a[n][1] / i - e[a[n][0]] / r; else var s = a[n][1] / i; var h = s >= .03 ? "#390" : -.03 >= s ? "#d90026" : "#ffffff", o = s > 0 ? "▲" : 0 > s ? "▼" : "⇔"; l += 0 != s ? '<td class="align-center" style="color:' + h + '">' + o + (100 * s).toFixed(1) + "%</td>" : '<td class="align-center">--</td>' } } return l += "</tr></table>" } function ParseJsonObj(t, e, i, r, a) { var l = t.championStatistics[e.toString()], n = { id: "left" === a ? "left-root" : "right-root", name: champIdToName(parseInt(e)), data: { img: "Icons/c" + e + ".png", numPoints: l.numberOfDataPoints, width: 20, itemId: parseInt(e) }, children: [] }; l.itemPaths.children.sort(function (t, e) { return t.numberOfBuilds < e.numberOfBuilds ? 1 : t.numberOfBuilds > e.numberOfBuilds ? -1 : 0 }); var s; for (s = l.itemPaths.children.length - 1; s >= 0; s -= 2) n.children.push(RecursiveBuildItemTree(n, l.itemPaths.children[s])); for (s = -2 == s ? 1 : 0; s < l.itemPaths.children.length; s++) n.children.push(RecursiveBuildItemTree(n, l.itemPaths.children[s])); if ("left" === a ? (currentLeftChamp = e, currentLeftPatch = r, leftItemsBuiltDictionary = l.totalItemsBuilt, leftChampDataPoints = l.numberOfDataPoints, $("#left-bg").attr("src", "Icons/c" + e + "b.jpg"), $("#left-tree-details").html(""), $("#left-tree-champion-title").html(getChampTitle(parseInt(e)))) : (currentRightChamp = e, currentRightPatch = r, rightItemsBuiltDictionary = l.totalItemsBuilt, rightChampDataPoints = l.numberOfDataPoints, $("#right-bg").attr("src", "Icons/c" + e + "b.jpg"), $("#right-tree-details").html(""), $("#right-tree-champion-title").html(getChampTitle(parseInt(e)))), null != leftItemsBuiltDictionary) { var h = CreateCommonBuiltItemsTable(leftItemsBuiltDictionary, rightItemsBuiltDictionary, leftChampDataPoints, rightChampDataPoints); $("#left-tree-item-details").html(h), $("#left-tree-item-details").offset({ left: $(document).width() / 4 - $("#left-tree-item-details").width() / 2 }) } if (null != rightItemsBuiltDictionary && (h = CreateCommonBuiltItemsTable(rightItemsBuiltDictionary, leftItemsBuiltDictionary, rightChampDataPoints, leftChampDataPoints), $("#right-tree-item-details").html(h), $("#right-tree-item-details").offset({ left: 3 * $(document).width() / 4 - $("#right-tree-item-details").width() / 2 })), null != leftItemsBuiltDictionary && null != rightItemsBuiltDictionary) { var o = calculateSimilarityScore(leftItemsBuiltDictionary, rightItemsBuiltDictionary), c = o > 50 ? 217 - 3.32 * (o - 50) : 217, m = o > 50 ? 3.06 * (o - 50) : 0, d = o > 50 ? 38 - .76 * (o - 50) : 38; h = 'Similarity Score<sup>[<a href="#" rel="tooltip" title="See the main page to see how this is calculated." id="similarity-score-help">?</a>]</sup>:<br/><div style="color: rgb(' + c.toFixed(0) + "," + m.toFixed(0) + "," + d.toFixed(0) + '); font-weight:bold; text-align:center; font-size: 150%">' + o.toFixed(2) + "</div>", $("#similarity-score").html(h), $("#similarity-score").offset({ left: $(document).width() / 2 - $("#similarity-score").width() / 2 }), $("#similarity-score-help").tooltip() } i(n, a), setHashParameters() } function ReloadData(t, e, i, r) { var a = new XMLHttpRequest; a.overrideMimeType("application/json"), a.open("GET", "JSON/output-" + e + ".json", !0), a.onreadystatechange = function () { if (4 == a.readyState) { var l = JSON.parse(a.responseText); i ? ParseJsonObj(l, t, UpdateST, e, r) : ParseJsonObj(l, t, CreateNewST, e, r) } }, a.send(null) } function InitializeTrees() { var t = getHashParameters(); currentLeftChamp = "leftId" in t ? t.leftId : "999", currentRightChamp = "rightId" in t ? t.rightId : "999", currentLeftPatch = "leftPatch" in t ? t.leftPatch : "5.11", currentRightPatch = "rightPatch" in t ? t.rightPatch : "5.14", $("#left-champ-select").select2({ templateResult: s2FormatChampOption }).select2("val", currentLeftChamp), $("#left-patch-select").select2({ templateResult: s2FormatPatchOption, minimumResultsForSearch: 1 / 0 }).select2("val", currentLeftPatch), $("#right-champ-select").select2({ templateResult: s2FormatChampOption }).select2("val", currentRightChamp), $("#right-patch-select").select2({ templateResult: s2FormatPatchOption, minimumResultsForSearch: 1 / 0 }).select2("val", currentRightPatch), $("#left-champ-select").change(function () { currentLeftChamp !== $(this).val() && ReloadData(parseInt($(this).val()), $("#left-patch-select").val(), !0, "left") }), $("#left-patch-select").change(function () { currentLeftPatch !== $(this).val() && ReloadData(parseInt($("#left-champ-select").val()), $(this).val(), !0, "left") }), $("#right-champ-select").change(function () { currentRightChamp !== $(this).val() && ReloadData(parseInt($(this).val()), $("#right-patch-select").val(), !0, "right") }), $("#right-patch-select").change(function () { currentRightPatch !== $(this).val() && ReloadData(parseInt($("#right-champ-select").val()), $(this).val(), !0, "right") }), $jit.ST.Plot.EdgeTypes.implement({ boxy: { render: function (t, e) { var i = this.getOrientation(t), r = t.nodeFrom, a = t.nodeTo, l = r._depth < a._depth, n = this.viz.geom.getEdge(l ? r : a, "begin", i), s = this.viz.geom.getEdge(l ? a : r, "end", i), h = { x: n.x, y: (n.y + s.y) / 2 }, o = { x: s.x, y: (n.y + s.y) / 2 }; e.getCtx().globalCompositeOperation = 1 == t.getData("topmost") ? "source-over" : "destination-over", this.edgeHelper.line.render(n, h, e), this.edgeHelper.line.render(h, o, e), this.edgeHelper.line.render(o, s, e), a.data.width / 4 > 1 && (this.nodeHelper.circle.render("fill", h, a.data.width / 4, e), this.nodeHelper.circle.render("fill", o, a.data.width / 4, e)) } } }), leftItemsBuiltDictionary = null, rightItemsBuiltDictionary = null, leftChampDataPoints = 0, rightChampDataPoints = 0, ReloadData(currentLeftChamp, currentLeftPatch, !1, "left"), ReloadData(currentRightChamp, currentRightPatch, !1, "right") }